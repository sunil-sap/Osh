<?xml version="1.0" encoding="UTF-8"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2012 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:file="http://www.springframework.org/schema/integration/file"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 1) Scan for files -->
	<!-- currently we have 7 custom and 1 15 min predefined folders to scan -->
	
	<!-- scan this directory for every 15 min -->
	<bean id="oshCustom0InboundBaseDirectory" class="java.lang.String">
		<constructor-arg value="#{configurationService.configuration.getProperty('acceleratorservices.custom0.impex.inboundfolder')}" />
	</bean>
	
	<file:inbound-channel-adapter id="oshCustom0FilePickup" directory="#{oshCustom0InboundBaseDirectory}"
		filename-regex="#{configurationService.configuration.getProperty('acceleratorservices.custom0.impex.inboundfolder.filePriority')}" comparator="oshCustom0FileOrderComparator" prevent-duplicates="false">
		<int:poller cron="#{configurationService.configuration.getProperty('acceleratorservices.custom0.impex.inboundfolder.cronexp')}" />
	</file:inbound-channel-adapter>
	
	<bean id="oshCustom0FileOrderComparator" parent="fileOrderComparator">
		<!-- <property name="filePriority" value="#{configurationService.configuration.getProperty('acceleratorservices.custom0.impex.inboundfolder.filePriority')}"/> -->
		
		<property name="prefixPriority">
		<map>
			<entry key="catalog" value="90" />
			<entry key="price" value="80" />
			<entry key="ats" value="70" />
		</map>
		</property>
	</bean>
	
	<file:outbound-gateway request-channel="oshCustom0FilePickup" reply-channel="oshbatchFilesProc"
		directory="#{oshProcessingDirectory}" delete-source-files="#{oshCleanupSrcFile}" />	
	
	<int:service-activator input-channel="oshbatchFilesProc" output-channel="oshBatchFilesHeaderInit" ref="oshHeaderSetupTask"
		method="execute" />
	<bean id="oshHeaderSetupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
		<property name="catalog" value="oshProductCatalog" />
		<property name="net" value="false" />
		<property name="storeBaseDirectory" ref="oshBaseDirectory" />
	</bean>
	
	<int:service-activator input-channel="oshBatchFilesHeaderInit" output-channel="oshBatchFilesHeader" ref="oshHeaderInitTask"
		method="execute" />
	<bean id="oshHeaderInitTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderInitTask">
		<property name="sequenceIdParser" ref="oshBatchSequenceIdParser"/>
		<property name="languageParser" ref="oshBatchLanguageParser"/>
		<property name="fallbackLanguage" value="en" />
	</bean>
	<bean id="oshBatchSequenceIdParser" class="com.hybris.osh.services.dataimport.batch.util.OshSequenceIdParser">
		<property name="parser">
			<bean class="de.hybris.platform.acceleratorservices.util.RegexParser">
				<property name="regex" value="-(\d)\.*" />
			</bean>
		</property>
	</bean>
	<bean id="oshBatchLanguageParser" class="de.hybris.platform.acceleratorservices.util.RegexParser">
		<property name="regex" value="-(\w{2})-(\d)\.*" />
	</bean>

	<!-- 3) transform csv to impex file -->
	<int:service-activator input-channel="oshBatchFilesHeader" output-channel="oshBatchFilesTran" ref="oshBatchTransformerTask"
		method="execute" />
	<bean id="oshBatchTransformerTask" 
		  class="com.hybris.osh.services.dataimport.batch.task.OshImpexTransformerTask" 
		  init-method="initConvertersMap">
		<property name="fieldSeparator" value="|" />
		<property name="encoding" value="UTF-8" />
		<property name="linesToSkip" value="1"/>
		<property name="cleanupHelper" ref="cleanupHelper" />
	</bean>
	
	<!-- 4) run impex import -->
	<int:service-activator input-channel="oshBatchFilesTran" output-channel="oshBatchFilesImp" ref="oshBatchRunnerTask"
		method="execute" />
	<bean id="oshBatchRunnerTask" class="com.hybris.osh.services.dataimport.batch.task.OshAbstractImpexRunnerTask">
		<lookup-method name="getImportService" bean="importService" />
		<lookup-method name="getImportConfig" bean="oshImportConfig" />
	</bean>
	<bean id="oshImportConfig" class="de.hybris.platform.servicelayer.impex.ImportConfig" scope="prototype">
		<property name="removeOnSuccess" value="false" />
		<property name="failOnError" value="false" />
		<property name="synchronous" value="true" />
		<property name="maxThreads" value="#{configurationService.configuration.getProperty('acceleratorservices.batch.impex.max-threads')}" />
		<property name="locale" value="en"/>
		<property name="validationMode" value="RELAXED"/>
	</bean>

	
	 <int:service-activator input-channel="oshBatchFilesImp" ref="batchCleanupTask" method="execute" />

	<alias name="oshCleanupHelper" alias="cleanupHelper"/>
	<bean id="oshCleanupHelper" class="com.hybris.osh.services.dataimport.batch.task.OshCleanupHelper">
		<property name="timeStampFormat" value="yyyyMMddHHmmssSSS" />
		<property name="errorFolder" ref="oshErrorDirectory" />
		<property name="archiveFolder" ref="oshArchiveDirectory" />
	</bean> 
	
</beans>
